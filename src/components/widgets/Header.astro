---
import { Icon } from "astro-icon/components";
import Logo from "~/components/Logo.astro";
import ToggleTheme from "~/components/common/ToggleTheme.astro";
import ToggleMenu from "~/components/common/ToggleMenu.astro";
import Button from "~/components/ui/Button.astro";

import { getHomePermalink } from "~/utils/permalinks";
import { trimSlash, getAsset } from "~/utils/permalinks";
import type { CallToAction } from "~/types";

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends CallToAction {}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = "header",
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = "center",
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<style lang="scss">
  a {
    position: relative;

    &:before {
      content: "";
      position: absolute;
      left: 0;
      bottom: 0;
      height: 4px;
      background: #900;
      width: 100%;
      transition: all 0.2s ease-in-out;
      transform: scaleX(0) translate3d(0, 0, 0); // hide
    }

    &:hover:before {
      transform: scaleX(1); // reveal
    }
  }
  @media print {
    header {
      display: none;
    }
  }
</style>
<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    "top-0 z-40 mx-auto w-full flex-none border-b border-gray-50/0 transition-opacity ease-in-out",
  ]}
  {...isSticky ? { "data-aw-sticky-header": true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      "text-default relative mx-auto w-full px-3 py-3 md:flex md:justify-between md:px-6",
      {
        "max-w-7xl": !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ "mr-auto rtl:mr-0 rtl:ml-auto": position === "right" }, "flex justify-between"]}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="text-default hidden w-full items-center overflow-x-hidden overflow-y-auto md:mx-5 md:flex md:w-auto md:overflow-x-auto md:overflow-y-visible"
      aria-label="Main navigation"
    >
      <ul
        class="flex w-full flex-col text-xl font-medium tracking-[0.01rem] md:w-auto md:flex-row md:self-center md:text-[0.9375rem]"
      >
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? "dropdown" : ""}>
              {links?.length ? (
                <>
                  <button class="hover:text-link flex items-center px-4 py-3 dark:hover:text-white">
                    {text}{" "}
                    <Icon name="tabler:chevron-down" class="ml-0.5 hidden h-3.5 w-3.5 md:inline rtl:mr-0.5 rtl:ml-0" />
                  </button>
                  <ul class="dropdown-menu dark:md:bg-dark rounded-sm pl-4 font-medium drop-shadow-xl md:absolute md:hidden md:min-w-[200px] md:bg-white/90 md:pl-0 md:backdrop-blur-md">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            "hover:text-link block px-5 py-2 whitespace-nowrap first:rounded-t last:rounded-b md:hover:bg-gray-100 dark:hover:bg-gray-700 dark:hover:text-white",
                            { "aw-link-active": href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    "hover:text-link items-centers mx-2 my-1 flex px-1 whitespace-nowrap dark:hover:text-white",
                    { "aw-link-active": href === currentPath },
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { "ml-auto rtl:mr-auto rtl:ml-0": position === "left" },
        "fixed bottom-0 left-0 hidden w-full items-center justify-end p-3 md:static md:mb-0 md:flex md:w-auto md:self-center md:justify-self-end md:p-0 rtl:right-0 rtl:left-auto",
      ]}
    >
      <div class="flex w-full items-center justify-between md:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-muted inline-flex items-center rounded-lg p-2.5 text-sm hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 focus:outline-hidden dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-700"
                aria-label="RSS Feed"
                href={getAsset("/rss.xml")}
              >
                <Icon name="tabler:rss" class="h-5 w-5" />
              </a>
            )
          }
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:mr-4 rtl:ml-0">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="ml-2 w-auto px-5.5 py-2.5 text-sm font-semibold shadow-none md:px-6" />
              ))}
            </span>
          ) : (
            ""
          )
        }
      </div>
    </div>
  </div>
  <hr />
</header>
